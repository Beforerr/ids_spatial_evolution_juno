---
title: Waiting time analysis
---

[Archived notebook using Python and R](analysis/01_occurence_rate.ipynb)

## Notes

- Occurence rate is related to the waiting time distribution.
- Group the data by the radial distance for WT analysis is not good as the radial distance is not a monotonic function of time. 

It is hard to remove duplicate events *totally* when combining multiple datasets with different τ. So when using the combined dataset, the occurence rate would be overestimated.


> An analysiswas carried out to determine the probability distribution governing the time interval between successive discontinuities. The times at which the discontinuities occurred,obtainedfromthe identificationprogram, were used to computethe time difference, $τ = T_j - T_{j-1}$, the so-called interarrival interval. The number of cases were then tabulated corresponding to discreteranges of τ, and a histogramwas prepared.By properly normalizing the numberof casesin each range a probability distribution function giving the relative frequency of occurrencewas obtained. A similar study was previously carried out by Burlaga[1969].

### References

- [Weibull distribution - Distributions.jl](https://juliastats.org/Distributions.jl/stable/univariate/#Distributions.Weibull)

$$
f(τ; α, θ) = \frac{α}{θ} \left( \frac{τ}{θ} \right)^{α-1} e^{-(τ/θ)^α}, \quad τ \ge 0
$$

```{julia}
using Juno
using Dates
using Discontinuity
using Discontinuity: waiting_time, remove_duplicates
using Discontinuity: plot_wt_pdf, plot_wt_pdf!
using CairoMakie
using Beforerr: easy_save
using AlgebraOfGraphics
using Distributions, DataFramesMeta
using Unitful
using DimensionalData

hidexlabel!(ax) = ax.xlabelvisible = false
hideylabel!(ax) = ax.ylabelvisible = false

M = (
    ρ=:ρ => "Occurence Rates (#/day)",
    ρ_norm=:ρ_norm => "Normalized Occurence Rates",
    tbin=:time_bin => "Time",
    r=:r_mean => "Radial Distance (AU)",
)

Juno.setup_theme!()
```

### Data

```{julia}
using Juno: general_produce, init_provider
using Juno: THEMIS, Wind, STEREO
using DataFrames, DataFramesMeta
init_provider()
wdf = general_produce("Wind", Wind.B_RTN)
tdf = general_produce("THB", THEMIS.B_FGL_GSE)
jdf = general_produce("Juno", Juno.Data.get_mag_data)
sdf = general_produce("STA", STEREO.B_RTN3)

wdf.id .= "Wind"
tdf.id .= "THEMIS-B"
jdf.id .= "Juno"
sdf.id .= "STEREO-A"
thb_sw_tranges = THEMIS.themis_b_sw()
# thb_sse_state = THEMIS.SSE_STATE(Juno.TIME_RANGE)
tdf_sw = mapreduce(vcat, eachrow(thb_sw_tranges)) do row
    @subset(tdf, :time .> row.start, :time .< row.stop)
end

Juno.Data.add_state_info!(jdf)
```

```{julia}
subset_jno(df, r) = subset(df, :radial_distance => x -> round_c.(x) .== r)
subset_time(df, t) = subset(df, :time => x -> x .< t)
```

```{julia}
jno_df_s1 = subset(jdf, :time => t -> year.(t) .== 2011);
jno_df_s2 = subset(jdf, :time => t -> year.(t) .== 2016);
```

## Waiting time distribution

```{julia}
function plot_wt_pdf_lim(df; xlims=(1, 1000), ylims=(1e-5, 8e-2), kwargs...)
    f = plot_wt_pdf(df; kwargs...)
    xlims!(xlims...)
    ylims!(ylims...)
    return f
end

using Printf
Base.show(io::IO, f::Float64) = @printf(io, "%.2f", f)

dists = (Weibull, Exponential)
step = 5
```

```{julia}
#| column: page
#| layout-ncol: 3
if false
    dfs = [jno_df, jno_df_s1, jno_df_s2]
    fgs = plot_wt_pdf_lim.(dfs; dists)
    display.(fgs)
end
```

### Juno

```{julia}
_wt(df, tmax=1000) = filter!(<(tmax), waiting_time(df))

let f = Figure()
    ax1 = plot_wt_pdf!(f[1, 1], _wt(jno_df_s1); dists)
    ax2 = plot_wt_pdf!(f[2, 1], _wt(jno_df_s2); dists)
    ax3 = plot_wt_pdf!(f[1, 2], _wt(jno_df_s1, 600); dists)
    ax4 = plot_wt_pdf!(f[2, 2], _wt(jno_df_s2, 600); dists)
    axs = (ax1, ax2, ax3, ax4)
    hideylabel!.(axs)
    xlims!.(axs, 1, 500)
    ylims!.(axs, 1e-5, 8e-2)
    f
end
```


### Wind and ARTEMIS

```{julia}
let f = Figure()
    _wt(df, tmax=1000) = filter!(<(tmax), waiting_time(df))
    ax1 = plot_wt_pdf!(f[1, 1], _wt(wdf); dists, legend_title="Wind")
    ax2 = plot_wt_pdf!(f[2, 1], _wt(tdf_sw); dists, legend_title="ARTEMIS")
    ax3 = plot_wt_pdf!(f[1, 2], _wt(wdf, 200); dists, legend_title="Wind")
    ax4 = plot_wt_pdf!(f[2, 2], _wt(tdf_sw, 200); dists, legend_title="ARTEMIS")

    axs = (ax1, ax2)
    axs2 = (ax3, ax4)
    hidexlabel!.((ax1, ax3))
    hideylabel!.(axs2)
    xlims!.(axs, 1, 500)
    ylims!.(axs, 1e-5, 8e-2)
    ylims!.(axs2, 1e-5, 8e-2)
    easy_save("fig_wt_pdf_wind_thb")
end
```

![](../figures/fig_wt_pdf_wind_thb.png)


```{julia}
using Beforerr: DistsFit

WaitingTimeDist(df, args...) = DistsFit(waiting_time(df), args...)
```

```{julia}
function plot_fig_wt_dist(; step=5, df1=jno_df_s1, df2=jno_df_s2)
    limits = (0, 680, 5e-6, 5e-2)
    f = Figure()
    new_ax(pos; kw...) = Axis(f[pos...]; yscale=log10, xlabel="τ (minutes)", ylabel="p(τ)", limits, kw...)

    ax1 = new_ax((1, 1); xlabel="")
    plot!(WaitingTimeDist(df1, dists, step))
    ax2 = new_ax((2, 1);)
    plot!(WaitingTimeDist(df2, dists, step))
    axislegend(ax1, "Juno, 2011"; loc=:upperright)
    axislegend(ax2, "Juno, 2016"; loc=:upperright)
    return f
end

let tdf = Discontinuity.remove_duplicates(df)
    df1 = subset(tdf, :time => t -> year.(t) .== 2011)
    df2 = subset(tdf, :time => t -> year.(t) .== 2016)
    plot_fig_wt_dist(; df1, df2)
    easy_save("fig_wt_dist_no_duplicates")
end
```

## Occurence rate

```{julia}
import DataFrames: groupby
using PartialFunctions

function get_wt_fit_params(time; dist=Weibull, stat=mean, tmax=nothing, δt=1u"minute", kwargs...)
    Δts = waiting_time(time)
    isnothing(tmax) || filter!(x -> x < tmax, Δts)
    stat(fit(dist, Δts; kwargs...)) * δt
end

function groupby(df::AbstractDataFrame, dt::Period, args...; col=:time)
    @chain df begin
        @transform!(:time_bin = round.(:time, dt),)
        @groupby(:time_bin, args...)
    end
end

function get_groupby_occurence_rate(df, dt::Period; tmax=nothing, combine=())
    @chain df begin
        groupby(dt, :id)
        DataFrames.combine(nrow, :time => get_wt_fit_params$(; tmax) => :τ, combine...)
        @transform(:ρ = NoUnits.(Day(1) ./ :τ))
    end
end
```

## Figure: Occurence rate for time

```{julia}
using LsqFit
using LaTeXStrings
using Beforerr: figsize

@. model(r, p) = p[1] / r^p[2]
label_model(p) = LaTeXString(@sprintf("y \\sim %.2f / r^{%.2f}", p[1], p[2]))

begin
    f = Figure(; size=(600, 300))
    dt = Day(60)
    ttdf = get_groupby_occurence_rate(tdf_sw, dt; tmax=120)
    wtdf = get_groupby_occurence_rate(wdf, dt; tmax=1000)
    stdf = @chain begin
        get_groupby_occurence_rate(sdf, dt; tmax=500)
        @rtransform(:ρ = ifelse(Date(2015, 3) < :time_bin < Date(2015, 8), missing, :ρ))
    end
    jtdf = get_groupby_occurence_rate(jdf, dt; tmax=1000, combine=([:r] .=> mean))
    jtdf.ρ_norm = jtdf.ρ ./ @rsubset(wtdf, :time_bin in jtdf.time_bin).ρ

    tticks = DateTime(2011):Year(1):DateTime(2016)
    axis = (; yticks=0:20:100, xticks=datetimeticks(tticks, Dates.format.(tticks, "yyyy")))
    specs = (data(wtdf) + data(stdf) + data(ttdf) + data(jtdf)) * mapping(M.tbin, M.ρ; color=:id => "") * visual(ScatterLines)
    g1 = draw!(f[1, 1], specs; axis)
    legend!(f[1, 1], g1; tellheight=false, tellwidth=false, valign=:bottom, halign=:left)
    ylims!(10, 105)

    g2 = draw!(f[1, 2], data(jtdf) * mapping(M.r, M.ρ_norm))
    ax2 = g2[1].axis
    rfit = curve_fit(model, jtdf.r_mean, jtdf.ρ_norm, [1.0, 1.0])
    lines!(ax2, sort(jtdf.r_mean), model(sort(jtdf.r_mean), rfit.param); color=:gray, linestyle=:dash)
    text!(ax2, (3, 0.8); text=label_model(rfit.param))
    ylims!(ax2, 0.15, 1.05)
    easy_save("fig_occurence_rate")
end
```

### Normalization by thickness

```{julia}
time_interval = Day(160)

jno_ρ_df = @chain jno_df begin
    @transform(
        :time_bin = (:time - minimum(:time)) ./ time_interval .|> round,
        :l = :L_k .* (abs ∘ cosd).(:θ_vn),
        :l_n = :L_k .* (abs ∘ cos ∘ atan).(:Vn_y ./ :Vn_x)
    )
    @transform(
        :l_ratio = :l ./ :r,
        :l_n_ratio = :l_n ./ :r
    )
    groupby(:time_bin)
    combine(
        nrow,
        :time => get_wt_fit_params => :τ,
        [:r :l :l_ratio :l_n_ratio] .=> mean
    )
    # subset(:nrow => x -> x .> 2000)
    @transform(
        :ρ = 1 ./ :τ,
    )
    @transform(
        :ρ_l = :ρ ./ :l_ratio_mean * maximum(:l_ratio_mean),
    )
    sort(:r_mean)
end
```

```{julia}
wind_ρ_df = @chain wind_df begin
    @transform!(
        :time_bin = (:time - minimum(:time)) ./ time_interval .|> round,
    )
    groupby(:time_bin)
    combine(
        nrow,
        :time => get_wt_fit_params => :τ,
    )
    @transform!(
        :ρ = 1 ./ :τ,
    )
end
```

```{julia}
df = leftjoin(jno_ρ_df, wind_ρ_df, on=:time_bin, makeunique=true)
df.ρ_ratio = @. df.ρ / df.ρ_1

@transform!(df,
    :ratio = :ρ_ratio ./ :l_ratio_mean,
    :ratio_n = :ρ_ratio ./ :l_n_ratio_mean,
)
@transform!(
    df,
    :ratio = :ratio ./ mean(:ratio),
    :ratio_n = :ratio_n ./ mean(:ratio_n)
)

df
```

```{julia}
x = :time_bin => "Time"
legends = ["Juno", "Wind"]
specs = data(df) * mapping(x, [:ρ_l, :ρ_1] .=> "Normalized Occurence rates") * mapping(color=dims(1) => renamer(legends))
draw(specs)
easy_save("ocr/ocr_normalized_by_r")
```

```{julia}
x = :r_mean => r_lab
specs = data(df) * mapping(x, :ρ)
draw(specs)
```

```{julia}
y = [:ratio_n, :ratio]
specs = data(df) * mapping(x) * mapping(y, color=dims(1) => renamer(string.(y)))
plt2 = draw(specs)
```


## Compare the exponential and Weibull fits for the waiting time distributions of Wind dataset

```{julia}
f1 = plot_wt_pdf_lim(wind_df, ylims=(1e-6, 1e-1),)
f2 = plot_wt_pdf_lim(wind_df, dist=Weibull, ylims=(1e-6, 1e-1))
display.([f1, f2]);
```

```{julia}
df1 = subset_time(jno_df, Date(2011, 9, 30))
df2 = subset_time(wind_df, Date(2011, 9, 30))
dfs = [df1, df2]
fgs = dfs .|> plot_wt_pdf_lim
display.(fgs);
```

