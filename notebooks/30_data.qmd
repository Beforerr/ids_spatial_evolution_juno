---
title: Data Processing (Julia)
---

```{julia}
using Juno.Data
using DimensionalData

n, V, T, r = get_state_data()
b = get_mag_data()
```

```{julia}
using Discontinuity
using Dates
period = Second(60)

ds = ids_finder(b, period, V, n)

ds.r = r[Ti(Near(ds.time))]
```

Diagnose the missing values

```{julia}
using SPEDAS

@kwdef struct JunoEvent{D} <: AbstractEvent
    data::D
    start
    stop
    metadata = Dict()
end

JunoEvent(df::DataFrame, i) = Event(df[i, :], df.tstart[i], df.tstop[i])
JunoEvent(df::DataFrame) = (i = rand(1:size(df, 1)); @info i; Event(df, i))


df.time[isnan.(df.grad)]
function plot_candidate(f, event, ts, toffset=Second(0); kwargs...)
    tmin, tmax = t_us_ds(event)
    f = tplot(f, ts, tmin - toffset, tmax + toffset; kwargs...)
    tlines!(f, [tmin, tmax])
    f
end
tplot(Product(b, tview), "2011-08-28T06:42:00", "2011-08-28T06:43:00")
```

```{julia}
using Discontinuity: var_mapping

M = var_mapping(; j=:J_m_max_mva)
maps1 = [M.l_log M.l_norm_log; M.j_log M.j_norm_log]
maps2 = [M.density_log M.B_log; M.beta M.bm0_log];
df
begin
    color = r_map
    fnames = ["juno_distribution_r", "juno_sw_paramters"]
    # df = subset_by_quantiles(ds, [:L_n_cross, :j0_k, :j0_k_norm])
    df = dropmissing(ds)
    spec = data(df) * mapping(; color)
    fs = map([maps1, maps2]) do m
        plot_dist(spec, m;
            datalimits=datalimits_f,
            axis,
            figure
        )
    end
    resize_to_layout!.(fs)
    # easy_save.(fnames, fs)
    display.(fs)
end
```