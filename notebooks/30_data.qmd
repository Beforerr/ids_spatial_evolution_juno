---
title: Data Processing (Julia)
---

```{julia}
using Juno.Data
using DimensionalData

n, V, T, r = get_state_data()
b = get_mag_data()
```

```{julia}
using Discontinuity
using Dates
using DataFrames
period = Second(60)

ds = ids_finder(b, period, V, n)

ds.r = r[Ti(Near(ds.time))]

df = dropmissing(ds)
```

Diagnose the missing values

```{julia}
using SPEDAS
using Discontinuity: mva_transform, tanh_model

JunoEvent(df::DataFrame, i) = Event(df[i, :], df.tstart[i], df.tstop[i])
JunoEvent(df::DataFrame) = (i = rand(1:size(df, 1)); @info i; Event(df, i))

B_product = Product(b, tview)

struct FitProduct{F,P} <: Function
    f::F
    param::P
    t_fit::DateTime
end

function (p::FitProduct)(t0, t1)
    tspan = DateTime(t0):Millisecond(10):DateTime(t1)
    xspan = (tspan .- p.t_fit) / Millisecond(1)
    data = p.f.(xspan, Ref(p.param))
    return DimVector(data, Ti(tspan))
end

FitProduct(row) = FitProduct(tanh_model, row.fit_param, row.t_us_ds[1])
FitProduct(df::DataFrame, i) = FitProduct(df[i, :])

struct MVAProduct <: Function
    V
    B
    B_tspan
end

(p::MVAProduct)(t0, t1) = mva(p.V(t0, t1), p.B(p.B_tspan...))

function plot_candidate(df::DataFrame, i, toffset=Second(0); kwargs...)
    row = df[i, :]
    B_mva = MVAProduct(B_product, B_product, row.t_us_ds)
    Bl_fit_product = FitProduct(row)

    tmin, tmax = row.tstart, row.tstop
    f = tplot([B_product, B_mva, Bl_fit_product], tmin - toffset, tmax + toffset; kwargs...)
    tlines!(f, collect(row.t_us_ds))
    f
end
```

```{julia}
# 740, 1508, 4004, 4805
for i in [740, 1508, 4805]
    display(plot_candidate(df, i))
end
```

```{julia}
using Discontinuity: var_mapping

M = var_mapping(; j=:J_m_max_mva)
maps1 = [M.l_log M.l_norm_log; M.j_log M.j_norm_log]
maps2 = [M.density_log M.B_log; M.beta M.bm0_log];
df
begin
    color = r_map
    fnames = ["juno_distribution_r", "juno_sw_paramters"]
    # df = subset_by_quantiles(ds, [:L_n_cross, :j0_k, :j0_k_norm])
    df = dropmissing(ds)
    spec = data(df) * mapping(; color)
    fs = map([maps1, maps2]) do m
        plot_dist(spec, m;
            datalimits=datalimits_f,
            axis,
            figure
        )
    end
    resize_to_layout!.(fs)
    # easy_save.(fnames, fs)
    display.(fs)
end
```