---
title: Results (Julia)
engine: julia
---

```{julia}
using Juno
using Juno: r_map, datalimits_f, produce_or_load_juno
using CairoMakie
using CairoMakie: WilkinsonTicks
using CairoMakie.Makie: resize_to_layout!
using DrWatson
using Discontinuity
using Discontinuity: var_mapping, compute_params!, compute_orientation_params!, filter_low_mva_quality!
using AlgebraOfGraphics
using DataFramesMeta
using Beforerr
import Beforerr: easy_save
using LaTeXStrings
using Unitful
M = var_mapping(; log_str="")

set_aog_theme!()
```

```{julia}
df = load_taus(; unique_f=missing)
jno_df = load();
wind_df = load(; name="Wind", ts=nothing);
```

```{julia}
udf = Discontinuity.remove_duplicates(df)
@info nrow(udf)
@info nrow(subset(udf, :r => x -> x.>=4))
```

![](./02_waiting_time.ipynb)

## Check the discontinuities properties with time and radial distance

```{julia}
maps1 = [M.l_log M.l_norm_log; M.j_log M.j_norm_log]
maps2 = [M.density_log M.B_log; M.beta M.bm0_log];
```

```{julia}
figure = (; size=Beforerr.figsize(7))

"""
    Strip trailing zeros from decimal numbers
"""
function _round(v;kw...)
    rounded = string(round(v; digits=1, kw...))
    # If it contains a decimal point, remove trailing zeros
    if contains(rounded, ".")
        # Remove trailing zeros
        rounded = replace(rounded, r"\.?0+$" => "")
        # If we removed everything after the decimal point, remove the decimal point too
        rounded = replace(rounded, r"\.$" => "")
    end
    return rounded
end

axis = (; 
    xticks = WilkinsonTicks(5),
    xtickformat = values -> [L"10^{%$(_round(v))}" for v in values],
    yscale=log10,
)
```

```{julia}
temp_plot(layer::Layer) = m -> plot_dist(layer, m; datalimits=datalimits_f)
temp_plot(df::DataFrame; color=year_map) = temp_plot(data(df) * mapping(color=color))

let df = wind_df, fnames = ["wind_distribution_time", "wind_sw_paramters"]
    spec = data(df) * mapping(color=year_map)
    fs = map([maps1, maps2]) do m
        plot_dist(spec, m; 
            datalimits=datalimits_f,
            axis,
            figure
        )
    end
    easy_save.(fnames, fs)
    display.(fs)
end
```

![](../figures/wind_distribution_time.png)

![](../figures/wind_sw_paramters.png)

```{julia}
# let df = j_events_taus
let color = r_map, fnames = ["juno_distribution_r", "juno_sw_paramters"]
    df = subset_by_quantiles(udf, [:L_n_cross, :j0_k, :j0_k_norm])
    spec = data(df) * mapping(; color)
    fs = map([maps1, maps2]) do m
        plot_dist(spec, m; 
            datalimits=datalimits_f,
            axis,
            figure
        )
    end
    resize_to_layout!.(fs)
    # easy_save.(fnames, fs)
    display.(fs)
end
```

![](../figures/juno_distribution_r.png)
![](../figures/juno_sw_paramters.png)

### Orientation

```{julia}
# ds = produce_or_load_juno()
let df= dropmissing(ds), color = r_map
    @chain df begin
        compute_orientation_params!
        filter_low_mva_quality!
    end
    f = Figure()
    spec = data(df) * mapping(:B_n_mva_norm, :B_n_cross_norm) * AlgebraOfGraphics.density()
    draw!(f[1,1],spec)
    spec2 = data(df) * mapping(:θ_mva_cross) * AlgebraOfGraphics.density()
    draw!(f[1,2],spec2)
    f
end
```

## Correlation analysis of SWDs observed by 1-AU satellites

Correlation analysis on the current density and solar wind parameters (J-Ne, J-beta, J-|B|, etc.)


```{julia}
using DataStructures: nlargest
let scols = [:j0_k,:j0_k_norm]
    @info "Before subsetting" nlargest.(10, eachcol(wind_df[!, scols]))
    sdf = subset_by_quantiles(wind_df, scols)
    @info "After subsetting"  nlargest.(10, eachcol(sdf[!, scols]))
end
```

```{julia}
using PairPlots

log_df(df) = log.(df)
select_cols(df, cols) = df[!, cols]

begin df = wind_df
    @transform! df :year = year.(:time)
    j_params = ["j0_k", "j0_k_norm", "j_Alfven", "n.mean", "B.mean", "β"]
    cols = intersect(j_params, names(df))
    sdf = subset_by_quantiles(ustrip.(df[!, cols]), Symbol.(cols), lower=0.01, upper=0.99)
    corr_matrix = cor(Matrix(log_df(sdf)))
    @info "Correlation Matrix" corr_matrix

    fig = Figure()
    gs = GridLayout(fig[1,1])
    f = pairplot(gs[1:6,1:6], log_df(sdf))
    # dfs = collect(groupby(df[!, [cols; "year"]], :year))
    # f = pairplot(gs[1:6,2:7], log_df.(select_cols.(dfs, Ref(cols)))..., bottomleft=false, topright=true)
    easy_save("temp/wind_pairplot")
end
```

```julia
┌ Info: Correlation Matrix
│   corr_matrix =
│    6×6 Matrix{Float64}:
│     1.0         0.878214   0.240162   0.126952   0.267604   0.0864104
│     0.878214    1.0       -0.253355  -0.247737  -0.160763   0.154384
│     0.240162   -0.253355   1.0        0.759608   0.867571  -0.138572
│     0.126952   -0.247737   0.759608   1.0        0.345521   0.233941
│     0.267604   -0.160763   0.867571   0.345521   1.0       -0.36578
└     0.0864104   0.154384  -0.138572   0.233941  -0.36578    1.0
```

## Effects of time lag on the discontinuity identification

```{julia}
normalize_by_max(x) = x / maximum(x)
normalize_by_max(df, x; kw...) = transform(df, x => normalize_by_max; kw...)
normalize_by_all(x) = x / sum(x)
normalize_by_all(df, x; kw...) = transform(df, x => normalize_by_all; kw...)

function plot_nrow(df, x, dx, color; xlabel=x, clabel=color, normalize=normalize_by_max, plottype=Stairs, kw...)
    y = Symbol(nrow)
    df = @chain df begin
        transform(x => ByRow(v -> round(v, dx)); renamecols=false)
        groupby([x, color]; sort=true)
        combine(nrow)
    end

    if normalize isa Function
        df = normalize(groupby(df, [x]), y; renamecols=false)
        ylabel = "Relative percentage of events"
    else
        ylabel = "Number of events"
    end

    plt = data(df) * mapping(x => xlabel, y => ylabel; color = color => clabel) * visual(plottype)
    draw(plt; kw...)
end

let tdf = df
    plot_nrow(tdf, :r, 0.5, :tau; xlabel=r_lab, clabel="T")
    easy_save("ocr/juno_tau_r")
end

let tdf = Discontinuity.remove_duplicates(df)
    plot_nrow(tdf, :r, 0.5, :tau; normalize = normalize_by_all, xlabel=r_lab, clabel="T")
    ylims!(0, 0.7)
    easy_save("ocr/juno_T_r")
end
```

## Rotation angle

```{julia}
layer = data(jno_df) * mapping(color=r_map)
maps = [M.ω; M.ω_in]
f = plot_dist(layer, maps)
```


```{julia}
f = plot_dist(layer * (; col=:accuracy), [:θ_nk => "θ_nk"])
```

## Magnetic field magnitude and radial dependency

```{julia}
rfunc(r) = sqrt(1/r^2 + 1/r^4)
rfunc(B,r) = B / rfunc(r)
B_r_scaled= (:"B.mean", :r) => (log10 ∘ rfunc)
B_m0_scaled= (:"fit.vars.amplitude", :r)  => (log10 ∘ abs ∘ rfunc)
let df = jno_df, color = r_map, m = [M.B_log M.bm0_log; B_r_scaled B_m0_scaled]
    spec = data(df) * mapping(; color)
    f = plot_dist(spec, m; 
            datalimits=datalimits_f,
            axis
        )
    display(f)
end
```

## Bn and Change in dB

```{julia}
let maps = [M.dB_norm_over_B, M.bn]
    layer = data(jno_df) * mapping(color=r_map, col=:accuracy)
    f = plot_dist(layer, maps)
end
```


```{julia}
let maps = [M.dB_norm_over_B, M.bn]
    l = data(wind_df) * (; col=:accuracy)
    f = plot_dist(l, maps)
end
```


## Compression ratio

```{julia}
let maps = [:db_over_b_max=> L"\max(Δ B)/B" , :db_over_b=> L"|Δ B|/B"], datalimits=((0, 0.5),)
    layer = data(jno_df) * mapping(color=r_map)
    f = plot_dist(layer, maps; axis=(yscale=identity,), datalimits)
end