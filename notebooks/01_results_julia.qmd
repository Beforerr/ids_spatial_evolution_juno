---
title: Results (Julia)
---

```{julia}
using DrWatson
using Discontinuity
using AlgebraOfGraphics
using DataFramesMeta
@quickactivate
include("../src/main.jl");
M = var_mapping()

```

```{julia}
df = load_taus(; unique_f=missing)
jno_df = load();
wind_df = load(; name="Wind", ts=nothing);
```

```{julia}
udf = Discontinuity.remove_duplicates(df)
@info nrow(udf)
@info nrow(subset(udf, :r => x -> x.>=4))
```

![](./02_waiting_time.ipynb)

## Check the discontinuities properties with time and radial distance

```{julia}
maps1 = [M.l_log M.l_norm_log; M.j_log M.j_norm_log]
maps2 = [M.density_log M.B_log; beta_map M.bm0_log];
```

```{julia}
temp_plot(layer::Layer) = m -> plot_dist(layer, m; datalimits=datalimits_f)
temp_plot(df::DataFrame; color=year_map) = temp_plot(data(df) * mapping(color=color))

let df = wind_df, fnames = ["wind_distribution_time", "wind_sw_paramters"]
    fs = temp_plot(df).([maps1, maps2])
    easy_save.(fnames, fs)
    display.(fs)
end
```

```{julia}
# let df = j_events_taus
let df = jno_df, color = r_map, fnames = ["juno_distribution_r", "juno_sw_paramters"]
    fs = temp_plot(df; color).([maps1, maps2])
    easy_save.(fnames, fs)
    display.(fs)
end
```

## Effects of time lag on the discontinuity identification

```{julia}
normalize_by_max(x) = x / maximum(x)
normalize_by_max(df, x; kw...) = transform(df, x => normalize_by_max; kw...)
normalize_by_all(x) = x / sum(x)
normalize_by_all(df, x; kw...) = transform(df, x => normalize_by_all; kw...)

function plot_nrow(df, x, dx, color; xlabel=x, clabel=color, normalize=normalize_by_max, plottype=Stairs, kw...)
    y = Symbol(nrow)
    df = @chain df begin
        transform(x => ByRow(v -> round(v, dx)); renamecols=false)
        groupby([x, color]; sort=true)
        combine(nrow)
    end

    if normalize isa Function
        df = normalize(groupby(df, [x]), y; renamecols=false)
        ylabel = "Relative percentage of events"
    else
        ylabel = "Number of events"
    end

    plt = data(df) * mapping(x => xlabel, y => ylabel; color = color => clabel) * visual(plottype)
    draw(plt; kw...)
end

let tdf = df
    plot_nrow(tdf, :r, 0.5, :tau; xlabel=r_lab, clabel="T")
    easy_save("ocr/juno_tau_r")
end

let tdf = Discontinuity.remove_duplicates(df)
    plot_nrow(tdf, :r, 0.5, :tau; normalize = normalize_by_all, xlabel=r_lab, clabel="T")
    ylims!(0, 0.7)
    easy_save("ocr/juno_T_r")
end
```

## Rotation angle

```{julia}
layer = data(jno_df) * mapping(color=r_map)
maps = [M.ω; M.ω_in]
f = plot_dist(layer, maps)
```


```{julia}
f = plot_dist(layer * (; col=:accuracy), [:θ_nk => "θ_nk"])
```

## Bn and Change in dB

```{julia}
let maps = [M.dB_norm_over_B, M.bn]
    layer = data(jno_df) * mapping(color=r_map, col=:accuracy)
    f = plot_dist(layer, maps)
end
```


```{julia}
let maps = [M.dB_norm_over_B, M.bn]
    l = data(wind_df) * (; col=:accuracy)
    f = plot_dist(l, maps)
end
```


## Compression ratio

```{julia}
let maps = [:db_over_b_max=> L"\max(Δ B)/B" , :db_over_b=> L"|Δ B|/B"], datalimits=((0, 0.5),)
    layer = data(jno_df) * mapping(color=r_map)
    f = plot_dist(layer, maps; axis=(yscale=identity,), datalimits)
end